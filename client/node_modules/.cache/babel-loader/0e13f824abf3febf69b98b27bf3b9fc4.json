{"ast":null,"code":"var _jsxFileName = \"/Users/j/Desktop/Capstone/dog-pool/client/src/components/Map/Map2.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { GoogleMap, useJsApiLoader } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  zoomControlOptions: {\n    position: google.maps.ControlPosition.RIGHT_CENTER // 'right-center' ,\n    // ...otherOptions\n\n  }\n};\n\nfunction Map2() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    isLoaded,\n    loadError\n  } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyDZ4HxogFXeESTTN2JXpPpjCRozf7vEfIk\" // ,\n    // ...otherOptions\n\n  });\n\n  const Map2 = () => {\n    _s();\n\n    // wrapping to a function is useful in case you want to access `window.google`\n    // to eg. setup options or create latLng object, it won't be available otherwise\n    // feel free to render directly if you don't need that\n    const onLoad = React.useCallback(function onLoad(mapInstance) {// do something with map Instance\n    });\n    return /*#__PURE__*/_jsxDEV(GoogleMap, {\n      options: options,\n      onLoad: onLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(Map2, \"xXS5vrvRJMHimxcrTL5NlYPQdEM=\");\n\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Map cannot be loaded right now, sorry.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n\n  return isLoaded ? Map2() : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 30\n  }, this);\n}\n\n_s2(Map2, \"ssip+Uy9VcsolHUNjpn9QiG6XKw=\", false, function () {\n  return [useJsApiLoader];\n});\n\n_c = Map2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map2\");","map":{"version":3,"sources":["/Users/j/Desktop/Capstone/dog-pool/client/src/components/Map/Map2.jsx"],"names":["React","GoogleMap","useJsApiLoader","options","zoomControlOptions","position","google","maps","ControlPosition","RIGHT_CENTER","Map2","isLoaded","loadError","googleMapsApiKey","onLoad","useCallback","mapInstance"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,QAAQ,EAAEC,MAAM,CAACC,IAAP,CAAYC,eAAZ,CAA4BC,YADpB,CACkC;AACpD;;AAFkB;AADN,CAAhB;;AAOA,SAASC,IAAT,GAAgB;AAAA;;AAAA;;AACd,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BV,cAAc,CAAC;AAC7CW,IAAAA,gBAAgB,EAAE,yCAD2B,CACgB;AAC7D;;AAF6C,GAAD,CAA9C;;AAKA,QAAMH,IAAI,GAAG,MAAM;AAAA;;AACjB;AACA;AACA;AACA,UAAMI,MAAM,GAAGd,KAAK,CAACe,WAAN,CAAkB,SAASD,MAAT,CAAgBE,WAAhB,EAA6B,CAC5D;AACD,KAFc,CAAf;AAGA,wBACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEb,OAApB;AAA6B,MAAA,MAAM,EAAEW;AAArC;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,GAdD;;AANc,KAMRJ,IANQ;;AAsBd,MAAIE,SAAJ,EAAe;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,SAAOD,QAAQ,GAAGD,IAAI,EAAP,gBAAY,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAA3B;AACD;;IA3BQA,I;UACyBR,c;;;KADzBQ,I","sourcesContent":["import React from \"react\";\nimport { GoogleMap, useJsApiLoader } from \"@react-google-maps/api\";\n\nconst options = {\n  zoomControlOptions: {\n    position: google.maps.ControlPosition.RIGHT_CENTER, // 'right-center' ,\n    // ...otherOptions\n  },\n};\n\nfunction Map2() {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyDZ4HxogFXeESTTN2JXpPpjCRozf7vEfIk\", // ,\n    // ...otherOptions\n  });\n\n  const Map2 = () => {\n    // wrapping to a function is useful in case you want to access `window.google`\n    // to eg. setup options or create latLng object, it won't be available otherwise\n    // feel free to render directly if you don't need that\n    const onLoad = React.useCallback(function onLoad(mapInstance) {\n      // do something with map Instance\n    });\n    return (\n      <GoogleMap options={options} onLoad={onLoad}>\n        {\n          // ...Your map components\n        }\n      </GoogleMap>\n    );\n  };\n\n  if (loadError) {\n    return <div>Map cannot be loaded right now, sorry.</div>;\n  }\n\n  return isLoaded ? Map2() : <Spinner />;\n}\n"]},"metadata":{},"sourceType":"module"}