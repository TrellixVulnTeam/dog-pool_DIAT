{"ast":null,"code":"var _jsxFileName = \"/Users/j/Desktop/Capstone/dog-pool/client/src/components/Map2/Directions.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { DirectionsRenderer } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapDirectionsRenderer(props) {\n  _s();\n\n  const [directions, setDirections] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const {\n      places,\n      travelMode,\n      setloadedOnce\n    } = props;\n    const waypoints = places.map(p => ({\n      location: {\n        lat: p.latitude,\n        lng: p.longitude\n      },\n      stopover: true\n    }));\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n    const directionsService = new window.google.maps.DirectionsService();\n    directionsService.route({\n      origin: origin,\n      destination: destination,\n      travelMode: travelMode,\n      waypoints: waypoints\n    }, (result, status) => {\n      console.log(\"result from directions service\", result);\n\n      if (status === window.google.maps.DirectionsStatus.OK) {\n        setloadedOnce(false);\n        setDirections(result);\n      } else {\n        setError(result);\n      }\n    });\n  });\n\n  if (error) {\n    console.log({\n      error\n    });\n  }\n\n  return directions && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n    panel: document.getElementById(\"panel\"),\n    directions: directions,\n    options: {\n      polylineOptions: {\n        strokeColor: \"rgb(20, 139, 213)\"\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n}\n\n_s(MapDirectionsRenderer, \"EbZ3rf2k47q8bOIBnVG92TiLXsw=\");\n\n_c = MapDirectionsRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapDirectionsRenderer\");","map":{"version":3,"sources":["/Users/j/Desktop/Capstone/dog-pool/client/src/components/Map2/Directions.jsx"],"names":["useEffect","useState","DirectionsRenderer","MapDirectionsRenderer","props","directions","setDirections","error","setError","places","travelMode","setloadedOnce","waypoints","map","p","location","lat","latitude","lng","longitude","stopover","origin","shift","destination","pop","directionsService","window","google","maps","DirectionsService","route","result","status","console","log","DirectionsStatus","OK","document","getElementById","polylineOptions","strokeColor"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,kBAAT,QAAmC,wBAAnC;;AAEA,eAAe,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AAAA;;AACnD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAES,MAAAA,MAAF;AAAUC,MAAAA,UAAV;AAAsBC,MAAAA;AAAtB,QAAwCP,KAA9C;AACA,UAAMQ,SAAS,GAAGH,MAAM,CAACI,GAAP,CAAYC,CAAD,KAAQ;AACnCC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEF,CAAC,CAACG,QAAT;AAAmBC,QAAAA,GAAG,EAAEJ,CAAC,CAACK;AAA1B,OADyB;AAEnCC,MAAAA,QAAQ,EAAE;AAFyB,KAAR,CAAX,CAAlB;AAKA,UAAMC,MAAM,GAAGT,SAAS,CAACU,KAAV,GAAkBP,QAAjC;AACA,UAAMQ,WAAW,GAAGX,SAAS,CAACY,GAAV,GAAgBT,QAApC;AAEA,UAAMU,iBAAiB,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,iBAAvB,EAA1B;AAEAJ,IAAAA,iBAAiB,CAACK,KAAlB,CACE;AACET,MAAAA,MAAM,EAAEA,MADV;AAEEE,MAAAA,WAAW,EAAEA,WAFf;AAGEb,MAAAA,UAAU,EAAEA,UAHd;AAIEE,MAAAA,SAAS,EAAEA;AAJb,KADF,EAOE,CAACmB,MAAD,EAASC,MAAT,KAAoB;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CH,MAA9C;;AACA,UAAIC,MAAM,KAAKN,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBO,gBAAnB,CAAoCC,EAAnD,EAAuD;AACrDzB,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAL,QAAAA,aAAa,CAACyB,MAAD,CAAb;AACD,OAHD,MAGO;AACLvB,QAAAA,QAAQ,CAACuB,MAAD,CAAR;AACD;AACF,KAfH;AAiBD,GA7BQ,CAAT;;AA+BA,MAAIxB,KAAJ,EAAW;AACT0B,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAE3B,MAAAA;AAAF,KAAZ;AACD;;AAED,SACEF,UAAU,iBACR,QAAC,kBAAD;AACE,IAAA,KAAK,EAAEgC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CADT;AAEE,IAAA,UAAU,EAAEjC,UAFd;AAGE,IAAA,OAAO,EAAE;AACPkC,MAAAA,eAAe,EAAE;AACfC,QAAAA,WAAW,EAAE;AADE;AADV;AAHX;AAAA;AAAA;AAAA;AAAA,UAFJ;AAaD;;GApDuBrC,qB;;KAAAA,qB","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { DirectionsRenderer } from \"@react-google-maps/api\";\n\nexport default function MapDirectionsRenderer(props) {\n  const [directions, setDirections] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const { places, travelMode, setloadedOnce } = props;\n    const waypoints = places.map((p) => ({\n      location: { lat: p.latitude, lng: p.longitude },\n      stopover: true,\n    }));\n\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n\n    const directionsService = new window.google.maps.DirectionsService();\n\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: travelMode,\n        waypoints: waypoints,\n      },\n      (result, status) => {\n        console.log(\"result from directions service\", result);\n        if (status === window.google.maps.DirectionsStatus.OK) {\n          setloadedOnce(false);\n          setDirections(result);\n        } else {\n          setError(result);\n        }\n      }\n    );\n  });\n\n  if (error) {\n    console.log({ error });\n  }\n\n  return (\n    directions && (\n      <DirectionsRenderer\n        panel={document.getElementById(\"panel\")}\n        directions={directions}\n        options={{\n          polylineOptions: {\n            strokeColor: \"rgb(20, 139, 213)\",\n          },\n        }}\n      />\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module"}