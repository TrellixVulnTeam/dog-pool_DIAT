{"ast":null,"code":"var _jsxFileName = \"/Users/j/Desktop/Capstone/dog-pool/client/src/components/Map/Map2.js\";\nimport React, { Component } from \"react\";\nimport { Dimensions, StyleSheet } from \"react-native\";\nimport MapView from \"react-native-maps\";\nimport MapViewDirections from \"react-native-maps-directions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  width,\n  height\n} = Dimensions.get(\"window\");\nconst ASPECT_RATIO = width / height;\nconst LATITUDE = 37.771707;\nconst LONGITUDE = -122.4053769;\nconst LATITUDE_DELTA = 0.0922;\nconst LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;\nconst GOOGLE_MAPS_APIKEY = \"AIzaSyDZ4HxogFXeESTTN2JXpPpjCRozf7vEfIk\";\n\nclass Map2 extends Component {\n  constructor(props) {\n    super(props); // AirBnB's Office, and Apple Park\n\n    this.onMapPress = e => {\n      this.setState({\n        coordinates: [...this.state.coordinates, e.nativeEvent.coordinate]\n      });\n    };\n\n    this.state = {\n      coordinates: [{\n        latitude: 37.3317876,\n        longitude: -122.0054812\n      }, {\n        latitude: 37.771707,\n        longitude: -122.4053769\n      }]\n    };\n    this.mapView = null;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(MapView, {\n      initialRegion: {\n        latitude: LATITUDE,\n        longitude: LONGITUDE,\n        latitudeDelta: LATITUDE_DELTA,\n        longitudeDelta: LONGITUDE_DELTA\n      },\n      style: StyleSheet.absoluteFill,\n      ref: c => this.mapView = c,\n      onPress: this.onMapPress,\n      children: [this.state.coordinates.map((coordinate, index) => /*#__PURE__*/_jsxDEV(MapView.Marker, {\n        coordinate: coordinate\n      }, `coordinate_${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)), this.state.coordinates.length >= 2 && /*#__PURE__*/_jsxDEV(MapViewDirections, {\n        origin: this.state.coordinates[0],\n        waypoints: this.state.coordinates.length > 2 ? this.state.coordinates.slice(1, -1) : undefined,\n        destination: this.state.coordinates[this.state.coordinates.length - 1],\n        apikey: GOOGLE_MAPS_APIKEY,\n        strokeWidth: 3,\n        strokeColor: \"hotpink\",\n        optimizeWaypoints: true,\n        onStart: params => {\n          console.log(`Started routing between \"${params.origin}\" and \"${params.destination}\"`);\n        },\n        onReady: result => {\n          console.log(`Distance: ${result.distance} km`);\n          console.log(`Duration: ${result.duration} min.`);\n          this.mapView.fitToCoordinates(result.coordinates, {\n            edgePadding: {\n              right: width / 20,\n              bottom: height / 20,\n              left: width / 20,\n              top: height / 20\n            }\n          });\n        },\n        onError: errorMessage => {// console.log('GOT AN ERROR');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Map2;\n/*\nimport { Wrapper, Status } from \"@googlemaps/react-wrapper\";\n\nconst GOOGLE_MAPS_APIKEY = \"AIzaSyDZ4HxogFXeESTTN2JXpPpjCRozf7vEfIk\";\n\nclass Map2 extends Component {\n  onMapPress = (e) => {\n    this.setState({\n      coordinates: [...this.state.coordinates, e.nativeEvent.coordinate],\n    });\n  };\n  render = (status: Status) => {\n    return <h1>{status}</h1>;\n  };\n  render() {\n    return (\n      <div>\n        <Wrapper apiKey={\"YOUR_API_KEY\"} render={this.render}>\n          <YourComponent />\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default Map2;\n\n\n\n*/","map":{"version":3,"sources":["/Users/j/Desktop/Capstone/dog-pool/client/src/components/Map/Map2.js"],"names":["React","Component","Dimensions","StyleSheet","MapView","MapViewDirections","width","height","get","ASPECT_RATIO","LATITUDE","LONGITUDE","LATITUDE_DELTA","LONGITUDE_DELTA","GOOGLE_MAPS_APIKEY","Map2","constructor","props","onMapPress","e","setState","coordinates","state","nativeEvent","coordinate","latitude","longitude","mapView","render","latitudeDelta","longitudeDelta","absoluteFill","c","map","index","length","slice","undefined","params","console","log","origin","destination","result","distance","duration","fitToCoordinates","edgePadding","right","bottom","left","top","errorMessage"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Dimensions, StyleSheet } from \"react-native\";\nimport MapView from \"react-native-maps\";\nimport MapViewDirections from \"react-native-maps-directions\";\n\nconst { width, height } = Dimensions.get(\"window\");\nconst ASPECT_RATIO = width / height;\nconst LATITUDE = 37.771707;\nconst LONGITUDE = -122.4053769;\nconst LATITUDE_DELTA = 0.0922;\nconst LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;\n\nconst GOOGLE_MAPS_APIKEY = \"AIzaSyDZ4HxogFXeESTTN2JXpPpjCRozf7vEfIk\";\n\nclass Map2 extends Component {\n  constructor(props) {\n    super(props);\n\n    // AirBnB's Office, and Apple Park\n    this.state = {\n      coordinates: [\n        {\n          latitude: 37.3317876,\n          longitude: -122.0054812,\n        },\n        {\n          latitude: 37.771707,\n          longitude: -122.4053769,\n        },\n      ],\n    };\n\n    this.mapView = null;\n  }\n\n  onMapPress = (e) => {\n    this.setState({\n      coordinates: [...this.state.coordinates, e.nativeEvent.coordinate],\n    });\n  };\n\n  render() {\n    return (\n      <MapView\n        initialRegion={{\n          latitude: LATITUDE,\n          longitude: LONGITUDE,\n          latitudeDelta: LATITUDE_DELTA,\n          longitudeDelta: LONGITUDE_DELTA,\n        }}\n        style={StyleSheet.absoluteFill}\n        ref={(c) => (this.mapView = c)}\n        onPress={this.onMapPress}\n      >\n        {this.state.coordinates.map((coordinate, index) => (\n          <MapView.Marker key={`coordinate_${index}`} coordinate={coordinate} />\n        ))}\n        {this.state.coordinates.length >= 2 && (\n          <MapViewDirections\n            origin={this.state.coordinates[0]}\n            waypoints={\n              this.state.coordinates.length > 2\n                ? this.state.coordinates.slice(1, -1)\n                : undefined\n            }\n            destination={\n              this.state.coordinates[this.state.coordinates.length - 1]\n            }\n            apikey={GOOGLE_MAPS_APIKEY}\n            strokeWidth={3}\n            strokeColor=\"hotpink\"\n            optimizeWaypoints={true}\n            onStart={(params) => {\n              console.log(\n                `Started routing between \"${params.origin}\" and \"${params.destination}\"`\n              );\n            }}\n            onReady={(result) => {\n              console.log(`Distance: ${result.distance} km`);\n              console.log(`Duration: ${result.duration} min.`);\n\n              this.mapView.fitToCoordinates(result.coordinates, {\n                edgePadding: {\n                  right: width / 20,\n                  bottom: height / 20,\n                  left: width / 20,\n                  top: height / 20,\n                },\n              });\n            }}\n            onError={(errorMessage) => {\n              // console.log('GOT AN ERROR');\n            }}\n          />\n        )}\n      </MapView>\n    );\n  }\n}\n\nexport default Map2;\n\n/*\nimport { Wrapper, Status } from \"@googlemaps/react-wrapper\";\n\nconst GOOGLE_MAPS_APIKEY = \"AIzaSyDZ4HxogFXeESTTN2JXpPpjCRozf7vEfIk\";\n\nclass Map2 extends Component {\n  onMapPress = (e) => {\n    this.setState({\n      coordinates: [...this.state.coordinates, e.nativeEvent.coordinate],\n    });\n  };\n  render = (status: Status) => {\n    return <h1>{status}</h1>;\n  };\n  render() {\n    return (\n      <div>\n        <Wrapper apiKey={\"YOUR_API_KEY\"} render={this.render}>\n          <YourComponent />\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default Map2;\n\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}